{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x80ac58cd.",
			"events": {
				"ApprovalForAll(address,address,bool)": {
					"details": "当为所有者启用或禁用操作员时，它会发出。 运营者可以管理所有者的所有 NFT。"
				},
				"Transfer(address,address,uint256)": {
					"details": "当任何 NFT 的所有权通过任何形式发生变化时，需要触发该事件。 当 NFT 创建（`from` == 0）和销毁（`to` == 0）时会触发此事件。 例外情况：在合约创建期间，可以创建和分配任意数量的 NFT，而不会发出 Transfer。 在任何形式的资产转移时，该 NFT如果有批准地址将重置为无。"
				}
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
					"params": {
						"_approved": "新批准的 NFT 控制器",
						"_tokenId": "NFT 批准"
					}
				},
				"balanceOf(address)": {
					"details": "分配给零地址的 NFT 被认为是无效的，并且该函数抛出有关零地址的查询。",
					"params": {
						"_owner": "查询余额的地址"
					},
					"returns": {
						"_0": "`_owner` 拥有的 NFT 数量，可能为零"
					}
				},
				"getApproved(uint256)": {
					"details": "如果 _tokenId 不是有效的 NFT，则抛出。",
					"params": {
						"_tokenId": "NFT寻找批准的地址"
					},
					"returns": {
						"_0": "此 NFT 的批准地址，如果没有则为零地址"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"_operator": "代表所有者的地址",
						"_owner": "拥有 NFT 的地址"
					},
					"returns": {
						"_0": "如果 _operator 是 _owner 的批准运算符，则为真，否则为假"
					}
				},
				"ownerOf(uint256)": {
					"details": "分配给零地址的 NFT 被认为是无效的，并且对它们的查询确实会抛出异常。",
					"params": {
						"_tokenId": "NFT 的标识符"
					},
					"returns": {
						"_0": "NFT所有者的地址"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "这与具有额外数据参数的其他函数的工作方式相同，只是此函数只是将数据设置为“”。",
					"params": {
						"_from": "NFT的当前所有者",
						"_to": "新 owner",
						"_tokenId": "转移的 NFT"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
					"params": {
						"_from": "NFT的当前所有者",
						"_to": "新 owner",
						"_tokenId": "转移的 NFT",
						"data": "没有指定格式的附加数据，在调用 _to 时发送"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "发出 ApprovalForAll 事件。 合同必须允许每个所有者有多个操作员。",
					"params": {
						"_approved": "如果运营商获得批准，则为 True，如果撤消批准，则为 false",
						"_operator": "添加到授权运营商集中的地址"
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
					"params": {
						"_from": "NFT的当前所有者",
						"_to": "新 owner",
						"_tokenId": "转移的 NFT"
					}
				}
			},
			"title": "ERC-721 Non-Fungible Token Standard",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"notice": "当 NFT 的批准地址被更改或重新确认时，它会发出。 零地址表示没有批准的地址。 当 Transfer 事件发出时，这也表明该 NFT 如果有批准地址被重置为无。"
				}
			},
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "更改或重申 NFT 的批准地址"
				},
				"balanceOf(address)": {
					"notice": "所有者的 NFT 数量"
				},
				"getApproved(uint256)": {
					"notice": "获取单个 NFT 的认可地址"
				},
				"isApprovedForAll(address,address)": {
					"notice": "查询一个地址是否是另一个地址的授权操作员"
				},
				"ownerOf(uint256)": {
					"notice": "找到 NFT 的所有者"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "将 NFT 的所有权从一个地址转移到另一个地址"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "将 NFT 的所有权从一个地址转移到另一个地址"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "启用或禁用对第三方（“操作员”）的批准以管理所有 `msg.sender` 的资产"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "转移 NFT 的所有权——调用者有责任确认 `_to` 能够接收 NFTS，否则它们可能会永久丢失"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/8001/ERC721/IERC721.sol": "IERC721"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/03/IERC165.sol": {
			"keccak256": "0x3f27edf30889c6ebc63c69d17c0452666d16399eadbbf5a2e8c991cba0dcc7f3",
			"license": "MIT",
			"urls": [
				"bzz-raw://e31c62ad1df0f3fd63477b56dcec786d4ba3735d2da3cb116521e96009587371",
				"dweb:/ipfs/QmT9cpd5L9wscw5ZgZRCmfgZtpBF59YQFRCApn3G5rypYQ"
			]
		},
		"contracts/8001/ERC721/IERC721.sol": {
			"keccak256": "0x2f1e198fb7cacf539f8b87890312f1e9ed0b23c9ff5897ebc70d448a21fe9add",
			"license": "MIT",
			"urls": [
				"bzz-raw://8069a45cf0cfe98297116e97ed8995341bbaf4ed295c68d91dd5ded73cf2e011",
				"dweb:/ipfs/QmZiyBHPcEiyqJco2Bu2EKGyWpQXgmDSnfh1CAH8wBptF4"
			]
		}
	},
	"version": 1
}