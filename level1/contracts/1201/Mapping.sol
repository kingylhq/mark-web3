// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

contract Mapping {

    // 映射类型只能声明在 storage
    // Solidity 仅允许映射类型声明在 storage 。声明在其他数据位置都会报错。
    // 映射类型不能声明为除了 storage 之外的位置

    // mapping(address => uint) memory myMap; // 编译错误

    mapping(address => uint) public balances; // 编译正确


    /********************************************************************************************************************/
    /********************************************************************************************************************/
    /********************************************************************************************************************/
    // 映射类型作为入参和返回值时，函数可见性必须是 private 或 internal 
    /********************************************************************************************************************/
    /********************************************************************************************************************/
    /********************************************************************************************************************/

    // 在 Solidity 编程中，函数的可见性（visibility）决定了函数可以在哪些上下文中被调用。
    // 关于映射类型在函数参数和返回值中的使用，有特定的规则依据函数的可见性不同而变化：

    // 当函数的可见性设置为 public 或 external 时，你不能在函数的参数（入参）或返回值中使用映射类型。
    // 如果函数的可见性是 private 或 internal，则允许在入参和返回值中使用映射类型。
    // 如果你还不熟悉什么是函数的可见性，这部分内容可能稍显复杂，可以选择先跳过。
    // 以下示例演示了如何根据函数的可见性使用映射类型：
    // 映射类型作为入参和返回值时，函数可见性必须是 private 或 internal

    // 编译错误，映射类型作为入参和返回值时，函数可见性必须是 private 或 internal_
    // function invalidDeclaration1(mapping(address => uint) storage myMap) public {} 

    // 编译错误，映射类型作为入参和返回值时，函数可见性必须是 private 或 internal_
    // function invalidDeclaration2(mapping(address => uint) storage myMap) external {}

    // 合法_
    function validDeclaration3(mapping(address => uint) storage myMap) private {} 

    // 合法_
    function validDeclaration4(mapping(address => uint) storage myMap) internal {}

}